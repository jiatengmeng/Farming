// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlantPropertyCfg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from PlantPropertyCfg.proto</summary>
  public static partial class PlantPropertyCfgReflection {

    #region Descriptor
    /// <summary>File descriptor for PlantPropertyCfg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlantPropertyCfgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQbGFudFByb3BlcnR5Q2ZnLnByb3RvEgZjb25maWcikAEKE1BsYW50UHJv",
            "cGVydHlDZmdTZXQSRwoRcGxhbnRwcm9wZXJ0eWNmZ3MYASADKAsyLC5jb25m",
            "aWcuUGxhbnRQcm9wZXJ0eUNmZ1NldC5QbGFudFByb3BlcnR5Q2ZnGjAKEFBs",
            "YW50UHJvcGVydHlDZmcSDAoEbl9pZBgBIAIoBRIOCgZzX25hbWUYAiACKAlC",
            "AkgD"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.PlantPropertyCfgSet), global::Config.PlantPropertyCfgSet.Parser, new[]{ "Plantpropertycfgs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Config.PlantPropertyCfgSet.Types.PlantPropertyCfg), global::Config.PlantPropertyCfgSet.Types.PlantPropertyCfg.Parser, new[]{ "NId", "SName" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlantPropertyCfgSet : pb::IMessage<PlantPropertyCfgSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlantPropertyCfgSet> _parser = new pb::MessageParser<PlantPropertyCfgSet>(() => new PlantPropertyCfgSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlantPropertyCfgSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.PlantPropertyCfgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantPropertyCfgSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantPropertyCfgSet(PlantPropertyCfgSet other) : this() {
      plantpropertycfgs_ = other.plantpropertycfgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantPropertyCfgSet Clone() {
      return new PlantPropertyCfgSet(this);
    }

    /// <summary>Field number for the "plantpropertycfgs" field.</summary>
    public const int PlantpropertycfgsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Config.PlantPropertyCfgSet.Types.PlantPropertyCfg> _repeated_plantpropertycfgs_codec
        = pb::FieldCodec.ForMessage(10, global::Config.PlantPropertyCfgSet.Types.PlantPropertyCfg.Parser);
    private readonly pbc::RepeatedField<global::Config.PlantPropertyCfgSet.Types.PlantPropertyCfg> plantpropertycfgs_ = new pbc::RepeatedField<global::Config.PlantPropertyCfgSet.Types.PlantPropertyCfg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config.PlantPropertyCfgSet.Types.PlantPropertyCfg> Plantpropertycfgs {
      get { return plantpropertycfgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlantPropertyCfgSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlantPropertyCfgSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plantpropertycfgs_.Equals(other.plantpropertycfgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plantpropertycfgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plantpropertycfgs_.WriteTo(output, _repeated_plantpropertycfgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plantpropertycfgs_.WriteTo(ref output, _repeated_plantpropertycfgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plantpropertycfgs_.CalculateSize(_repeated_plantpropertycfgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlantPropertyCfgSet other) {
      if (other == null) {
        return;
      }
      plantpropertycfgs_.Add(other.plantpropertycfgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plantpropertycfgs_.AddEntriesFrom(input, _repeated_plantpropertycfgs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plantpropertycfgs_.AddEntriesFrom(ref input, _repeated_plantpropertycfgs_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PlantPropertyCfgSet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlantPropertyCfg : pb::IMessage<PlantPropertyCfg>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlantPropertyCfg> _parser = new pb::MessageParser<PlantPropertyCfg>(() => new PlantPropertyCfg());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlantPropertyCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Config.PlantPropertyCfgSet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlantPropertyCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlantPropertyCfg(PlantPropertyCfg other) : this() {
          _hasBits0 = other._hasBits0;
          nId_ = other.nId_;
          sName_ = other.sName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlantPropertyCfg Clone() {
          return new PlantPropertyCfg(this);
        }

        /// <summary>Field number for the "n_id" field.</summary>
        public const int NIdFieldNumber = 1;
        private readonly static int NIdDefaultValue = 0;

        private int nId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NId {
          get { if ((_hasBits0 & 1) != 0) { return nId_; } else { return NIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            nId_ = value;
          }
        }
        /// <summary>Gets whether the "n_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "n_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "s_name" field.</summary>
        public const int SNameFieldNumber = 2;
        private readonly static string SNameDefaultValue = "";

        private string sName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SName {
          get { return sName_ ?? SNameDefaultValue; }
          set {
            sName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "s_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSName {
          get { return sName_ != null; }
        }
        /// <summary>Clears the value of the "s_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSName() {
          sName_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlantPropertyCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlantPropertyCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NId != other.NId) return false;
          if (SName != other.SName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasNId) hash ^= NId.GetHashCode();
          if (HasSName) hash ^= SName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasNId) {
            output.WriteRawTag(8);
            output.WriteInt32(NId);
          }
          if (HasSName) {
            output.WriteRawTag(18);
            output.WriteString(SName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasNId) {
            output.WriteRawTag(8);
            output.WriteInt32(NId);
          }
          if (HasSName) {
            output.WriteRawTag(18);
            output.WriteString(SName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasNId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NId);
          }
          if (HasSName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlantPropertyCfg other) {
          if (other == null) {
            return;
          }
          if (other.HasNId) {
            NId = other.NId;
          }
          if (other.HasSName) {
            SName = other.SName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                NId = input.ReadInt32();
                break;
              }
              case 18: {
                SName = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                NId = input.ReadInt32();
                break;
              }
              case 18: {
                SName = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
