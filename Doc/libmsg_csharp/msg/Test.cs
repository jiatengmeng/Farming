// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: test.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Test {

  /// <summary>Holder for reflection information generated from test.proto</summary>
  public static partial class TestReflection {

    #region Descriptor
    /// <summary>File descriptor for test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp0ZXN0LnByb3RvEgR0ZXN0IlsKC0RhdGFQYWNrYWdlEhIKCnJlYWxfYXJy",
            "YXkYASADKAESEgoKcmVhbF9jb3VudBgCIAIoBRIRCglpbnRfYXJyYXkYAyAD",
            "KAUSEQoJaW50X2NvdW50GAQgAigF"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Test.DataPackage), global::Test.DataPackage.Parser, new[]{ "RealArray", "RealCount", "IntArray", "IntCount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataPackage : pb::IMessage<DataPackage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataPackage> _parser = new pb::MessageParser<DataPackage>(() => new DataPackage());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Test.TestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPackage(DataPackage other) : this() {
      _hasBits0 = other._hasBits0;
      realArray_ = other.realArray_.Clone();
      realCount_ = other.realCount_;
      intArray_ = other.intArray_.Clone();
      intCount_ = other.intCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPackage Clone() {
      return new DataPackage(this);
    }

    /// <summary>Field number for the "real_array" field.</summary>
    public const int RealArrayFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_realArray_codec
        = pb::FieldCodec.ForDouble(9);
    private readonly pbc::RepeatedField<double> realArray_ = new pbc::RepeatedField<double>();
    /// <summary>
    ///实型数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> RealArray {
      get { return realArray_; }
    }

    /// <summary>Field number for the "real_count" field.</summary>
    public const int RealCountFieldNumber = 2;
    private readonly static int RealCountDefaultValue = 0;

    private int realCount_;
    /// <summary>
    ///实型数组大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RealCount {
      get { if ((_hasBits0 & 1) != 0) { return realCount_; } else { return RealCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        realCount_ = value;
      }
    }
    /// <summary>Gets whether the "real_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRealCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "real_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRealCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "int_array" field.</summary>
    public const int IntArrayFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_intArray_codec
        = pb::FieldCodec.ForInt32(24);
    private readonly pbc::RepeatedField<int> intArray_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///整型数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntArray {
      get { return intArray_; }
    }

    /// <summary>Field number for the "int_count" field.</summary>
    public const int IntCountFieldNumber = 4;
    private readonly static int IntCountDefaultValue = 0;

    private int intCount_;
    /// <summary>
    ///整型数组大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntCount {
      get { if ((_hasBits0 & 2) != 0) { return intCount_; } else { return IntCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        intCount_ = value;
      }
    }
    /// <summary>Gets whether the "int_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIntCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "int_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIntCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!realArray_.Equals(other.realArray_)) return false;
      if (RealCount != other.RealCount) return false;
      if(!intArray_.Equals(other.intArray_)) return false;
      if (IntCount != other.IntCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= realArray_.GetHashCode();
      if (HasRealCount) hash ^= RealCount.GetHashCode();
      hash ^= intArray_.GetHashCode();
      if (HasIntCount) hash ^= IntCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      realArray_.WriteTo(output, _repeated_realArray_codec);
      if (HasRealCount) {
        output.WriteRawTag(16);
        output.WriteInt32(RealCount);
      }
      intArray_.WriteTo(output, _repeated_intArray_codec);
      if (HasIntCount) {
        output.WriteRawTag(32);
        output.WriteInt32(IntCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      realArray_.WriteTo(ref output, _repeated_realArray_codec);
      if (HasRealCount) {
        output.WriteRawTag(16);
        output.WriteInt32(RealCount);
      }
      intArray_.WriteTo(ref output, _repeated_intArray_codec);
      if (HasIntCount) {
        output.WriteRawTag(32);
        output.WriteInt32(IntCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += realArray_.CalculateSize(_repeated_realArray_codec);
      if (HasRealCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RealCount);
      }
      size += intArray_.CalculateSize(_repeated_intArray_codec);
      if (HasIntCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataPackage other) {
      if (other == null) {
        return;
      }
      realArray_.Add(other.realArray_);
      if (other.HasRealCount) {
        RealCount = other.RealCount;
      }
      intArray_.Add(other.intArray_);
      if (other.HasIntCount) {
        IntCount = other.IntCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            realArray_.AddEntriesFrom(input, _repeated_realArray_codec);
            break;
          }
          case 16: {
            RealCount = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            intArray_.AddEntriesFrom(input, _repeated_intArray_codec);
            break;
          }
          case 32: {
            IntCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            realArray_.AddEntriesFrom(ref input, _repeated_realArray_codec);
            break;
          }
          case 16: {
            RealCount = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            intArray_.AddEntriesFrom(ref input, _repeated_intArray_codec);
            break;
          }
          case 32: {
            IntCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
