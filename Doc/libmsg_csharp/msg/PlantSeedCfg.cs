// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PlantSeedCfg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from PlantSeedCfg.proto</summary>
  public static partial class PlantSeedCfgReflection {

    #region Descriptor
    /// <summary>File descriptor for PlantSeedCfg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlantSeedCfgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQbGFudFNlZWRDZmcucHJvdG8SBmNvbmZpZyLBAQoPUGxhbnRTZWVkQ2Zn",
            "U2V0EjsKDXBsYW50c2VlZGNmZ3MYASADKAsyJC5jb25maWcuUGxhbnRTZWVk",
            "Q2ZnU2V0LlBsYW50U2VlZENmZxpxCgxQbGFudFNlZWRDZmcSDAoEbl9pZBgB",
            "IAIoBRIOCgZzX25hbWUYAiACKAkSEAoIbl9yYXJpdHkYAyACKAUSDwoHc19p",
            "bWFnZRgEIAIoCRINCgVzX2RlcxgFIAIoCRIRCgluX3BsYW50aWQYBiACKAVC",
            "AkgD"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.PlantSeedCfgSet), global::Config.PlantSeedCfgSet.Parser, new[]{ "Plantseedcfgs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Config.PlantSeedCfgSet.Types.PlantSeedCfg), global::Config.PlantSeedCfgSet.Types.PlantSeedCfg.Parser, new[]{ "NId", "SName", "NRarity", "SImage", "SDes", "NPlantid" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlantSeedCfgSet : pb::IMessage<PlantSeedCfgSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlantSeedCfgSet> _parser = new pb::MessageParser<PlantSeedCfgSet>(() => new PlantSeedCfgSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlantSeedCfgSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.PlantSeedCfgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSeedCfgSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSeedCfgSet(PlantSeedCfgSet other) : this() {
      plantseedcfgs_ = other.plantseedcfgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlantSeedCfgSet Clone() {
      return new PlantSeedCfgSet(this);
    }

    /// <summary>Field number for the "plantseedcfgs" field.</summary>
    public const int PlantseedcfgsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Config.PlantSeedCfgSet.Types.PlantSeedCfg> _repeated_plantseedcfgs_codec
        = pb::FieldCodec.ForMessage(10, global::Config.PlantSeedCfgSet.Types.PlantSeedCfg.Parser);
    private readonly pbc::RepeatedField<global::Config.PlantSeedCfgSet.Types.PlantSeedCfg> plantseedcfgs_ = new pbc::RepeatedField<global::Config.PlantSeedCfgSet.Types.PlantSeedCfg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config.PlantSeedCfgSet.Types.PlantSeedCfg> Plantseedcfgs {
      get { return plantseedcfgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlantSeedCfgSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlantSeedCfgSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plantseedcfgs_.Equals(other.plantseedcfgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plantseedcfgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plantseedcfgs_.WriteTo(output, _repeated_plantseedcfgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plantseedcfgs_.WriteTo(ref output, _repeated_plantseedcfgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += plantseedcfgs_.CalculateSize(_repeated_plantseedcfgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlantSeedCfgSet other) {
      if (other == null) {
        return;
      }
      plantseedcfgs_.Add(other.plantseedcfgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plantseedcfgs_.AddEntriesFrom(input, _repeated_plantseedcfgs_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plantseedcfgs_.AddEntriesFrom(ref input, _repeated_plantseedcfgs_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PlantSeedCfgSet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PlantSeedCfg : pb::IMessage<PlantSeedCfg>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlantSeedCfg> _parser = new pb::MessageParser<PlantSeedCfg>(() => new PlantSeedCfg());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlantSeedCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Config.PlantSeedCfgSet.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlantSeedCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlantSeedCfg(PlantSeedCfg other) : this() {
          _hasBits0 = other._hasBits0;
          nId_ = other.nId_;
          sName_ = other.sName_;
          nRarity_ = other.nRarity_;
          sImage_ = other.sImage_;
          sDes_ = other.sDes_;
          nPlantid_ = other.nPlantid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlantSeedCfg Clone() {
          return new PlantSeedCfg(this);
        }

        /// <summary>Field number for the "n_id" field.</summary>
        public const int NIdFieldNumber = 1;
        private readonly static int NIdDefaultValue = 0;

        private int nId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NId {
          get { if ((_hasBits0 & 1) != 0) { return nId_; } else { return NIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            nId_ = value;
          }
        }
        /// <summary>Gets whether the "n_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "n_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNId() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "s_name" field.</summary>
        public const int SNameFieldNumber = 2;
        private readonly static string SNameDefaultValue = "";

        private string sName_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SName {
          get { return sName_ ?? SNameDefaultValue; }
          set {
            sName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "s_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSName {
          get { return sName_ != null; }
        }
        /// <summary>Clears the value of the "s_name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSName() {
          sName_ = null;
        }

        /// <summary>Field number for the "n_rarity" field.</summary>
        public const int NRarityFieldNumber = 3;
        private readonly static int NRarityDefaultValue = 0;

        private int nRarity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NRarity {
          get { if ((_hasBits0 & 2) != 0) { return nRarity_; } else { return NRarityDefaultValue; } }
          set {
            _hasBits0 |= 2;
            nRarity_ = value;
          }
        }
        /// <summary>Gets whether the "n_rarity" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNRarity {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "n_rarity" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNRarity() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "s_image" field.</summary>
        public const int SImageFieldNumber = 4;
        private readonly static string SImageDefaultValue = "";

        private string sImage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SImage {
          get { return sImage_ ?? SImageDefaultValue; }
          set {
            sImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "s_image" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSImage {
          get { return sImage_ != null; }
        }
        /// <summary>Clears the value of the "s_image" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSImage() {
          sImage_ = null;
        }

        /// <summary>Field number for the "s_des" field.</summary>
        public const int SDesFieldNumber = 5;
        private readonly static string SDesDefaultValue = "";

        private string sDes_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SDes {
          get { return sDes_ ?? SDesDefaultValue; }
          set {
            sDes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "s_des" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasSDes {
          get { return sDes_ != null; }
        }
        /// <summary>Clears the value of the "s_des" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSDes() {
          sDes_ = null;
        }

        /// <summary>Field number for the "n_plantid" field.</summary>
        public const int NPlantidFieldNumber = 6;
        private readonly static int NPlantidDefaultValue = 0;

        private int nPlantid_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NPlantid {
          get { if ((_hasBits0 & 4) != 0) { return nPlantid_; } else { return NPlantidDefaultValue; } }
          set {
            _hasBits0 |= 4;
            nPlantid_ = value;
          }
        }
        /// <summary>Gets whether the "n_plantid" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasNPlantid {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "n_plantid" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNPlantid() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlantSeedCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlantSeedCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NId != other.NId) return false;
          if (SName != other.SName) return false;
          if (NRarity != other.NRarity) return false;
          if (SImage != other.SImage) return false;
          if (SDes != other.SDes) return false;
          if (NPlantid != other.NPlantid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasNId) hash ^= NId.GetHashCode();
          if (HasSName) hash ^= SName.GetHashCode();
          if (HasNRarity) hash ^= NRarity.GetHashCode();
          if (HasSImage) hash ^= SImage.GetHashCode();
          if (HasSDes) hash ^= SDes.GetHashCode();
          if (HasNPlantid) hash ^= NPlantid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasNId) {
            output.WriteRawTag(8);
            output.WriteInt32(NId);
          }
          if (HasSName) {
            output.WriteRawTag(18);
            output.WriteString(SName);
          }
          if (HasNRarity) {
            output.WriteRawTag(24);
            output.WriteInt32(NRarity);
          }
          if (HasSImage) {
            output.WriteRawTag(34);
            output.WriteString(SImage);
          }
          if (HasSDes) {
            output.WriteRawTag(42);
            output.WriteString(SDes);
          }
          if (HasNPlantid) {
            output.WriteRawTag(48);
            output.WriteInt32(NPlantid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasNId) {
            output.WriteRawTag(8);
            output.WriteInt32(NId);
          }
          if (HasSName) {
            output.WriteRawTag(18);
            output.WriteString(SName);
          }
          if (HasNRarity) {
            output.WriteRawTag(24);
            output.WriteInt32(NRarity);
          }
          if (HasSImage) {
            output.WriteRawTag(34);
            output.WriteString(SImage);
          }
          if (HasSDes) {
            output.WriteRawTag(42);
            output.WriteString(SDes);
          }
          if (HasNPlantid) {
            output.WriteRawTag(48);
            output.WriteInt32(NPlantid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasNId) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NId);
          }
          if (HasSName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SName);
          }
          if (HasNRarity) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NRarity);
          }
          if (HasSImage) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SImage);
          }
          if (HasSDes) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SDes);
          }
          if (HasNPlantid) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NPlantid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlantSeedCfg other) {
          if (other == null) {
            return;
          }
          if (other.HasNId) {
            NId = other.NId;
          }
          if (other.HasSName) {
            SName = other.SName;
          }
          if (other.HasNRarity) {
            NRarity = other.NRarity;
          }
          if (other.HasSImage) {
            SImage = other.SImage;
          }
          if (other.HasSDes) {
            SDes = other.SDes;
          }
          if (other.HasNPlantid) {
            NPlantid = other.NPlantid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                NId = input.ReadInt32();
                break;
              }
              case 18: {
                SName = input.ReadString();
                break;
              }
              case 24: {
                NRarity = input.ReadInt32();
                break;
              }
              case 34: {
                SImage = input.ReadString();
                break;
              }
              case 42: {
                SDes = input.ReadString();
                break;
              }
              case 48: {
                NPlantid = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                NId = input.ReadInt32();
                break;
              }
              case 18: {
                SName = input.ReadString();
                break;
              }
              case 24: {
                NRarity = input.ReadInt32();
                break;
              }
              case 34: {
                SImage = input.ReadString();
                break;
              }
              case 42: {
                SDes = input.ReadString();
                break;
              }
              case 48: {
                NPlantid = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
